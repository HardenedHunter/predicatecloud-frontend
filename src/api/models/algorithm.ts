// {
//     "dimensions": 2,
//     "clusters": 2,
//     "values": [
//       [1, 2],
//       [3, 4],
//       [5, 6],
//       [7, 8]
//     ]
// }

// {
//   "dimensions": 10,
//   "clusters": 2,
//   "values": [
//     [13, 34, 32, 47, 39, 35, 20, 19, 14, 25],
//     [44, 1, 23, 27, 39, 11, 11, 9, 3, 26],
//     [28, 48, 43, 45, 17, 40, 18, 36, 34, 4],
//     [39, 18, 48, 14, 20, 5, 2, 45, 30, 46],
//     [41, 17, 40, 31, 6, 14, 5, 23, 37, 15],
//     [28, 19, 19, 43, 16, 49, 24, 10, 1, 42],
//     [7, 9, 12, 28, 26, 10, 24, 13, 41, 4],
//     [6, 47, 17, 27, 28, 20, 25, 47, 46, 20],
//     [34, 36, 42, 29, 25, 10, 4, 45, 30, 36],
//     [15, 35, 30, 40, 19, 38, 36, 41, 50, 21],
//     [34, 13, 1, 12, 6, 34, 7, 27, 8, 15],
//     [10, 17, 48, 49, 13, 6, 18, 37, 23, 37],
//     [15, 22, 14, 2, 45, 46, 44, 8, 25, 30],
//     [46, 19, 30, 4, 37, 31, 12, 21, 36, 13],
//     [36, 8, 29, 17, 2, 17, 12, 22, 7, 46],
//     [15, 22, 26, 4, 2, 26, 29, 24, 29, 32],
//     [32, 23, 32, 3, 48, 43, 2, 45, 50, 25],
//     [35, 13, 19, 26, 28, 37, 27, 2, 2, 28],
//     [11, 13, 21, 8, 35, 29, 8, 45, 36, 9],
//     [31, 33, 2, 33, 50, 15, 20, 36, 35, 49],
//     [14, 14, 11, 32, 22, 24, 44, 18, 4, 26],
//     [7, 26, 4, 42, 43, 12, 18, 7, 41, 16],
//     [27, 44, 34, 49, 30, 22, 48, 39, 19, 12],
//     [8, 5, 49, 48, 47, 33, 41, 39, 43, 9],
//     [10, 48, 43, 37, 26, 4, 50, 34, 36, 11],
//     [42, 33, 26, 9, 22, 3, 7, 12, 17, 46],
//     [29, 24, 40, 7, 29, 2, 26, 16, 6, 18],
//     [28, 4, 21, 5, 12, 13, 13, 50, 32, 11],
//     [38, 29, 38, 26, 30, 8, 44, 30, 47, 32],
//     [16, 21, 39, 6, 1, 28, 4, 3, 48, 35],
//     [34, 22, 45, 26, 26, 1, 38, 19, 13, 39],
//     [24, 18, 47, 20, 49, 18, 9, 32, 16, 17],
//     [12, 11, 42, 18, 21, 27, 13, 46, 46, 50],
//     [36, 49, 31, 10, 2, 13, 24, 46, 39, 13],
//     [50, 5, 34, 13, 10, 41, 11, 17, 33, 30],
//     [2, 29, 46, 45, 18, 22, 13, 3, 42, 6],
//     [4, 26, 42, 41, 49, 28, 5, 24, 38, 4],
//     [2, 44, 30, 32, 31, 11, 49, 30, 15, 35],
//     [35, 12, 16, 33, 25, 41, 44, 43, 25, 10],
//     [33, 18, 7, 5, 36, 17, 20, 12, 27, 15],
//     [27, 36, 46, 48, 10, 12, 41, 25, 24, 40],
//     [43, 10, 31, 14, 37, 6, 19, 43, 12, 47],
//     [1, 38, 44, 29, 1, 9, 34, 35, 2, 1],
//     [14, 15, 15, 5, 39, 24, 44, 6, 1, 10],
//     [48, 11, 26, 42, 45, 46, 9, 1, 40, 47],
//     [12, 10, 29, 24, 42, 37, 19, 30, 28, 41],
//     [22, 16, 40, 3, 8, 15, 24, 23, 23, 39],
//     [8, 35, 14, 40, 1, 4, 46, 20, 38, 19],
//     [37, 5, 25, 8, 19, 9, 47, 41, 37, 5],
//     [41, 45, 6, 42, 2, 47, 4, 30, 46, 40]
//   ]
// }
import Joi from 'joi';

const randomInteger = (min: number, max: number) => {
  let rand = min + Math.random() * (max + 1 - min);
  return Math.floor(rand);
};

export const generateKMeansData = (dotsCount: number, dimensions: number) => {
  let a = [];
  for (let i = 0; i < dotsCount; i++) {
    let b = [];
    for (let j = 0; j < dimensions; j++) {
      b.push(randomInteger(1, 50));
    }
    a.push(b);
  }
};

export const kmeansSchema = {
  dimensions: Joi.number().min(1),
  clusters: Joi.number().min(1),
  values: Joi.array()
    .items(
      Joi.array()
        .length(Joi.ref('dimensions'))
        .items(Joi.number().required())
        .required()
    )
    .required(),
};

export interface IKMeansData {
  dimensions: number;
  clusters: number;
  values: Array<Array<number>>;
}
